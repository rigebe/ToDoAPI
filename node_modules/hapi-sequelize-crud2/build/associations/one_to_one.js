'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _createDecoratedObject(descriptors) { var target = {}; for (var i = 0; i < descriptors.length; i++) { var descriptor = descriptors[i]; var decorators = descriptor.decorators; var key = descriptor.key; delete descriptor.key; delete descriptor.decorators; descriptor.enumerable = true; descriptor.configurable = true; if ('value' in descriptor || descriptor.initializer) descriptor.writable = true; if (decorators) { for (var f = 0; f < decorators.length; f++) { var decorator = decorators[f]; if (typeof decorator === 'function') { descriptor = decorator(target, key, descriptor) || descriptor; } else { throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator); } } } if (descriptor.initializer) { descriptor.value = descriptor.initializer.call(target); } Object.defineProperty(target, key, descriptor); } return target; }

var _boom = require('boom');

var _boom2 = _interopRequireDefault(_boom);

var _controller_manager = require('../controller_manager');

var _controller_manager2 = _interopRequireDefault(_controller_manager);

var _hoek = require('hoek');

var _hoek2 = _interopRequireDefault(_hoek);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _error = require('../error');

var _error2 = _interopRequireDefault(_error);

var _helpers = require('../helpers');

var prefix = undefined;

var methods = {};

exports['default'] = function (server, model, association, options) {
  prefix = options.prefix;

  var asscOptions = _controller_manager2['default'].pluckAssociationOptions(options.controllerOptions, association._singular);

  for (var method in methods) {
    var methodOpts = asscOptions[method];

    if (!!methodOpts) {
      methodOpts = typeof methodOpts === 'object' ? methodOpts : {};

      methods[method](server, model, association, methodOpts);
    }
  }
};

var index = methods.index = function (server, model, association, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'GET';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/{id}/' + association._singular;
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var instance, _queryParams, include, result;

      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return regeneratorRuntime.awrap((0, _helpers.getModel)(request, model));

          case 2:
            instance = context$2$0.sent;

            if (instance) {
              context$2$0.next = 5;
              break;
            }

            return context$2$0.abrupt('return', reply(_boom2['default'].notFound()));

          case 5:
            _queryParams = (0, _helpers.queryParams)(server, request);
            include = _queryParams.include;
            context$2$0.next = 9;
            return regeneratorRuntime.awrap(instance[association.accessors.get]({ include: include }));

          case 9:
            result = context$2$0.sent;

            reply(result);

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]), options);

  server.route(route);
};

exports.index = index;
var create = methods.create = function (server, model, association, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'POST';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/{id}/' + association._singular;
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var instance, result;
      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return regeneratorRuntime.awrap((0, _helpers.getModel)(request, model));

          case 2:
            instance = context$2$0.sent;

            if (instance) {
              context$2$0.next = 5;
              break;
            }

            return context$2$0.abrupt('return', reply(_boom2['default'].notFound()));

          case 5:
            context$2$0.next = 7;
            return regeneratorRuntime.awrap(instance[association.accessors.create](request.payload));

          case 7:
            result = context$2$0.sent;

            reply(result);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]), options);

  server.route(route);
};

exports.create = create;
var update = methods.update = function (server, model, association, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'PUT';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/{id}/' + association._singular + '/{aid}';
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var instance, result;
      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return regeneratorRuntime.awrap((0, _helpers.getModel)(request, model));

          case 2:
            instance = context$2$0.sent;

            if (instance) {
              context$2$0.next = 5;
              break;
            }

            return context$2$0.abrupt('return', reply(_boom2['default'].notFound()));

          case 5:
            context$2$0.next = 7;
            return regeneratorRuntime.awrap(instance[association.accessors.set](request.params.aid));

          case 7:
            result = context$2$0.sent;

            reply(result);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]), options);

  server.route(route);
};

exports.update = update;
var destroy = methods.destroy = function (server, model, association, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'DELETE';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/{id}/' + association._singular;
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var instance, result;
      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return regeneratorRuntime.awrap((0, _helpers.getModel)(request, model));

          case 2:
            instance = context$2$0.sent;

            if (instance) {
              context$2$0.next = 5;
              break;
            }

            return context$2$0.abrupt('return', reply(_boom2['default'].notFound()));

          case 5:
            context$2$0.next = 7;
            return regeneratorRuntime.awrap(instance[association.accessors.set](null));

          case 7:
            result = context$2$0.sent;

            reply(result);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]), options);

  server.route(route);
};
exports.destroy = destroy;
