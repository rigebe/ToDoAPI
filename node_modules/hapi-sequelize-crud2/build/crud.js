'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _createDecoratedObject(descriptors) { var target = {}; for (var i = 0; i < descriptors.length; i++) { var descriptor = descriptors[i]; var decorators = descriptor.decorators; var key = descriptor.key; delete descriptor.key; delete descriptor.decorators; descriptor.enumerable = true; descriptor.configurable = true; if ('value' in descriptor || descriptor.initializer) descriptor.writable = true; if (decorators) { for (var f = 0; f < decorators.length; f++) { var decorator = decorators[f]; if (typeof decorator === 'function') { descriptor = decorator(target, key, descriptor) || descriptor; } else { throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator); } } } if (descriptor.initializer) { descriptor.value = descriptor.initializer.call(target); } Object.defineProperty(target, key, descriptor); } return target; }

var _boom = require('boom');

var _boom2 = _interopRequireDefault(_boom);

var _hoek = require('hoek');

var _hoek2 = _interopRequireDefault(_hoek);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _error = require('./error');

var _error2 = _interopRequireDefault(_error);

var _helpers = require('./helpers');

var _associationsIndex = require('./associations/index');

var associations = _interopRequireWildcard(_associationsIndex);

var prefix = undefined,
    scopePrefix = undefined,
    controllerOptions = undefined;

var methods = {};

exports['default'] = function (server, model, options) {
  prefix = options.prefix, scopePrefix = options.scopePrefix, controllerOptions = options.controllerOptions;

  for (var method in methods) {
    var methodOpts = controllerOptions[method];

    if (!!methodOpts) {
      methodOpts = typeof methodOpts === 'object' ? methodOpts : {};

      methods[method](server, model, methodOpts);
    }
  }
};

var index = methods.index = function (server, model, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'GET';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural;
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var _queryParams, where, offset, limit, include, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, list;

      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _queryParams = (0, _helpers.queryParams)(server, request);
            where = _queryParams.where;
            offset = _queryParams.offset;
            limit = _queryParams.limit;
            include = _queryParams.include;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 8;

            for (_iterator = Object.keys(where)[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              key = _step.value;

              try {
                where[key] = JSON.parse(where[key]);
              } catch (e) {
                //
              }
            }

            context$2$0.next = 16;
            break;

          case 12:
            context$2$0.prev = 12;
            context$2$0.t0 = context$2$0['catch'](8);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 16:
            context$2$0.prev = 16;
            context$2$0.prev = 17;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 19:
            context$2$0.prev = 19;

            if (!_didIteratorError) {
              context$2$0.next = 22;
              break;
            }

            throw _iteratorError;

          case 22:
            return context$2$0.finish(19);

          case 23:
            return context$2$0.finish(16);

          case 24:
            context$2$0.next = 26;
            return regeneratorRuntime.awrap(model.scope(request.pre.scope).findAll({
              where: where, include: include, offset: offset, limit: limit
            }));

          case 26:
            list = context$2$0.sent;

            reply(list);

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[8, 12, 16, 24], [17,, 19, 23]]);
    }
  }, {
    key: 'config',
    initializer: function initializer() {
      return {
        validate: {
          query: {
            filter: _helpers.validation.filter(model),
            include: _helpers.validation.include(model),
            offset: _helpers.validation.offset,
            limit: _helpers.validation.limit
          }
        }
      };
    }
  }]), options);

  server.route(route);
};

exports.index = index;
var get = methods.get = function (server, model, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'GET';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/{id}';
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var _queryParams2, include, instance;

      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _queryParams2 = (0, _helpers.queryParams)(server, request);
            include = _queryParams2.include;
            context$2$0.t0 = request.pre.model;

            if (context$2$0.t0) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 6;
            return regeneratorRuntime.awrap(model.scope(request.pre.scope).findById(request.params.id, { include: include }));

          case 6:
            context$2$0.t0 = context$2$0.sent;

          case 7:
            instance = context$2$0.t0;

            if (instance) {
              context$2$0.next = 10;
              break;
            }

            return context$2$0.abrupt('return', reply(_boom2['default'].notFound()));

          case 10:

            reply(instance);

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'config',
    initializer: function initializer() {
      return {
        validate: {
          params: {
            id: _joi2['default'].number().integer()
          },
          query: {
            include: _helpers.validation.include(model)
          }
        }
      };
    }
  }]), options);

  server.route(route);
};

exports.get = get;
var scope = methods.scope = function (server, model, options) {
  var scopes = Object.keys(model.options.scopes);

  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'GET';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/' + scopePrefix + '/{scope}';
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var _queryParams3, where, offset, limit, include, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, key, preparedScopes, list;

      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _queryParams3 = (0, _helpers.queryParams)(server, request);
            where = _queryParams3.where;
            offset = _queryParams3.offset;
            limit = _queryParams3.limit;
            include = _queryParams3.include;
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 8;

            for (_iterator2 = Object.keys(where)[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              key = _step2.value;

              try {
                where[key] = JSON.parse(where[key]);
              } catch (e) {
                //
              }
            }

            context$2$0.next = 16;
            break;

          case 12:
            context$2$0.prev = 12;
            context$2$0.t0 = context$2$0['catch'](8);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t0;

          case 16:
            context$2$0.prev = 16;
            context$2$0.prev = 17;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 19:
            context$2$0.prev = 19;

            if (!_didIteratorError2) {
              context$2$0.next = 22;
              break;
            }

            throw _iteratorError2;

          case 22:
            return context$2$0.finish(19);

          case 23:
            return context$2$0.finish(16);

          case 24:
            preparedScopes = (0, _helpers.prepareScopes)([request.pre.scope, request.params.scope]);
            context$2$0.next = 27;
            return regeneratorRuntime.awrap(model.scope(preparedScopes).findAll({ include: include, where: where, offset: offset, limit: limit }));

          case 27:
            list = context$2$0.sent;

            reply(list);

          case 29:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[8, 12, 16, 24], [17,, 19, 23]]);
    }
  }, {
    key: 'config',
    initializer: function initializer() {
      var _Joi$string;

      return {
        validate: {
          params: {
            scope: (_Joi$string = _joi2['default'].string()).valid.apply(_Joi$string, _toConsumableArray(scopes))
          },
          query: {
            filter: _helpers.validation.filter(model),
            include: _helpers.validation.include(model),
            offset: _helpers.validation.offset,
            limit: _helpers.validation.limit
          }
        }
      };
    }
  }]), options);

  server.route(route);
};

exports.scope = scope;
var create = methods.create = function (server, model, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'POST';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural;
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var instance;
      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return regeneratorRuntime.awrap(model.create(request.payload));

          case 2:
            instance = context$2$0.sent;

            reply(instance);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]), options);

  server.route(route);
};

exports.create = create;
var update = methods.update = function (server, model, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'PUT';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/{id}';
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var instance, result;
      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return regeneratorRuntime.awrap((0, _helpers.getModel)(request, model));

          case 2:
            instance = context$2$0.sent;

            if (!instance) {
              reply(_boom2['default'].notFound());
            }

            context$2$0.next = 6;
            return regeneratorRuntime.awrap(instance.update(request.payload));

          case 6:
            result = context$2$0.sent;

            reply(result);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'config',
    initializer: function initializer() {
      return {
        validate: {
          params: {
            id: _helpers.validation.id
          }
        }
      };
    }
  }]), options);

  server.route(route);
};

exports.update = update;
var destroy = methods.destroy = function (server, model, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'DELETE';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/{id}';
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var instance, result;
      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return regeneratorRuntime.awrap((0, _helpers.getModel)(request, model));

          case 2:
            instance = context$2$0.sent;

            if (!instance) {
              reply(_boom2['default'].notFound());
            }

            context$2$0.next = 6;
            return regeneratorRuntime.awrap(instance.destroy());

          case 6:
            result = context$2$0.sent;

            reply(result);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'config',
    initializer: function initializer() {
      return {
        validate: {
          params: {
            id: _helpers.validation.id
          }
        }
      };
    }
  }]), options);

  server.route(route);
};

exports.destroy = destroy;
var count = methods.count = function (server, model, options) {
  var route = _hoek2['default'].applyToDefaults(_createDecoratedObject([{
    key: 'method',
    initializer: function initializer() {
      return 'GET';
    }
  }, {
    key: 'path',
    initializer: function initializer() {
      return prefix + '/' + model._plural + '/count';
    }
  }, {
    key: 'handler',
    decorators: [_error2['default']],
    value: function handler(request, reply) {
      var _queryParams4, where, count;

      return regeneratorRuntime.async(function handler$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _queryParams4 = (0, _helpers.queryParams)(server, request);
            where = _queryParams4.where;
            context$2$0.next = 4;
            return regeneratorRuntime.awrap(model.scope(request.pre.scope).count({ where: where }));

          case 4:
            count = context$2$0.sent;

            reply({ count: count });

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'config',
    initializer: function initializer() {
      return {
        validate: {
          query: {
            filter: _helpers.validation.filter(model)
          }
        }
      };
    }
  }]), options);

  server.route(route);
};

exports.count = count;
exports.associations = associations;
