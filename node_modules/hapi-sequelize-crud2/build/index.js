'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _controller_manager = require('./controller_manager');

var _controller_manager2 = _interopRequireDefault(_controller_manager);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _hoek = require('hoek');

var _hoek2 = _interopRequireDefault(_hoek);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

var _crud = require('./crud');

var _crud2 = _interopRequireDefault(_crud);

var _snakeCase = require('snake-case');

var _snakeCase2 = _interopRequireDefault(_snakeCase);

var internals = {};

internals.onRequest = function (request, reply) {
  var uri = request.raw.req.url;
  var parsed = _url2['default'].parse(uri, false);
  parsed.query = _qs2['default'].parse(parsed.query);
  request.setUrl(parsed);

  return reply['continue']();
};

internals.optionDefaults = {
  prefix: '',
  scopePrefix: 's',
  snakeCase: false,
  'private': [],
  controllers: 'controllers/**/*.js'
};

exports.register = function (server, options, next) {
  if (options === undefined) options = {};

  options = _hoek2['default'].applyToDefaults(internals.optionDefaults, options);

  var db = server.plugins['hapi-sequelize'].db;
  var models = db.sequelize.models;
  var modelNames = Object.keys(models).filter(function (m) {
    return options['private'].indexOf(m) === -1;
  });
  var convertCase = options.snakeCase ? _snakeCase2['default'] : function (str) {
    return str;
  };

  _controller_manager2['default'].loadControllers(server, options.controllers);

  server.ext({
    type: 'onRequest',
    method: internals.onRequest
  });

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = modelNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var modelName = _step.value;

      if (!_controller_manager2['default'].controllersEnabled(modelName)) {
        continue;
      }

      var model = models[modelName];
      var _model$options$name = model.options.name;
      var plural = _model$options$name.plural;
      var singular = _model$options$name.singular;

      model._plural = convertCase(plural);
      model._singular = convertCase(singular);

      // Join tables
      if (model.options.name.singular !== model.name) {
        continue;
      }

      options.controllerOptions = _controller_manager2['default'].controllerOptions(modelName);

      (0, _crud2['default'])(server, model, options);

      if (!_controller_manager2['default'].associationsEnabled(modelName)) {
        continue;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.keys(model.associations)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var key = _step2.value;

          if (!_controller_manager2['default'].associationEnabled(modelName, key)) {
            continue;
          }

          var association = model.associations[key];
          var associationName = association.options.name;
          var associationType = association.associationType;
          var source = association.source;
          var target = association.target;

          association._plural = convertCase(associationName.plural);
          association._singular = convertCase(associationName.singular);

          try {
            switch (associationType) {
              case 'BelongsTo':
              case 'HasOne':
                _crud.associations.oneToOne(server, source, association, options);
                break;
              case 'HasMany':
              case 'BelongsToMany':
                _crud.associations.oneToMany(server, source, association, options);
                break;
            }
          } catch (e) {
            // There might be conflicts in case of models associated with themselves and some other
            // rare cases.
            console.warn(e);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  next();
};

exports.register.attributes = {
  pkg: require('../package.json')
};
