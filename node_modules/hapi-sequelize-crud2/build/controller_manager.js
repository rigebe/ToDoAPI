'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _hoek = require('hoek');

var _hoek2 = _interopRequireDefault(_hoek);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _camelCase = require('camel-case');

var _camelCase2 = _interopRequireDefault(_camelCase);

var internals = {
  controllers: {},
  resolvedControllers: {}
};

internals.defaultControllerOptions = {
  index: true,
  get: true,
  count: true,
  scope: true,
  create: true,
  destroy: true,
  update: true
};

internals.defaultAssociationOptions = {
  index: true,
  create: true,
  update: true,
  updateMany: true,
  destroy: true,
  destroyMany: true,
  count: true
};

internals.getFiles = function (patterns) {
  if (!Array.isArray(patterns)) {
    patterns = [patterns];
  }

  return patterns.reduce(function (arr, pattern) {
    return arr.concat(_glob2['default'].sync(pattern, { nodir: true }));
  }, []);
};

exports.controllerOptions = function (modelName) {

  if (internals.resolvedControllers[modelName]) {
    return internals.resolvedControllers[modelName];
  }

  var server = internals.server;
  var model = server.plugins['hapi-sequelize'].db.sequelize.models[modelName];

  var defaultCtrl = internals.defaultControllerFactory ? internals.defaultControllerFactory(server, model) : {};

  var modelCtrl = internals.controllers.hasOwnProperty(modelName) ? internals.controllers[modelName] : {};

  var ctrl = internals.resolvedControllers[modelName] = internals.applyControllerDefaults(_hoek2['default'].applyToDefaults(defaultCtrl, modelCtrl));

  return ctrl;
};

exports.pluckAssociationOptions = function (options, association) {
  if (!options.associations) {
    return internals.defaultAssociationOptions;
  }

  var defaultOpts = options.associations['*'] || {};

  var associationOpts = options.associations && options.associations[association] ? options.associations[association] : {};

  if (Object.keys(defaultOpts).length > 0) {
    var methods = Object.keys(internals.defaultAssociationOptions);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var method = _step.value;

        var methodOpts = associationOpts.hasOwnProperty(method) ? associationOpts[method] : {};

        if (defaultOpts.hasOwnProperty(method)) {

          var defaultMethodOpts = defaultOpts[method];

          if (methodOpts !== false && defaultMethodOpts !== false) {
            associationOpts[method] = _hoek2['default'].applyToDefaults(defaultMethodOpts, methodOpts);
          } else if (!associationOpts.hasOwnProperty(method) && defaultMethodOpts === false) {
            associationOpts[method] = false;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return _hoek2['default'].applyToDefaults(internals.defaultAssociationOptions, associationOpts);
};

exports.loadControllers = function (server, patterns) {
  var models = server.plugins['hapi-sequelize'].db.sequelize.models;

  internals.server = server;
  internals.controllers = {};
  internals.resolvedControllers = {};
  delete internals.defaultControllerFactory;

  internals.getFiles(patterns).forEach(function (f) {
    var pathInfo = _path2['default'].parse(f);
    var fileName = _path2['default'].resolve('.', pathInfo.dir, pathInfo.base);
    var name = pathInfo.name.replace(/\..+$/, ''); // enables adding suffix for testing, e.g. modelName.timestamp.js
    var modelName = name.indexOf('_') < 1 // -1 or 0 match
    ? name : (0, _camelCase2['default'])(name);

    var ctrlFactory = require(fileName);

    if (modelName === '_default') {
      internals.defaultControllerFactory = ctrlFactory;
    } else {
      internals.controllers[modelName] = ctrlFactory(server, models[modelName]);
    }
  });

  return this;
};

exports.controllersEnabled = function (modelName) {
  var opts = this.controllerOptions(modelName);

  return !opts.hasOwnProperty('*') || !!opts['*'];
};

exports.associationsEnabled = function (modelName) {
  var opts = this.controllerOptions(modelName);

  return !opts.hasOwnProperty('associations') || !!opts.associations;
};

exports.associationEnabled = function (modelName, associationKey) {
  var opts = this.controllerOptions(modelName);

  return !opts.hasOwnProperty('associations') || !opts.associations.hasOwnProperty(associationKey) || !!opts.associations[associationKey];
};

internals.applyControllerDefaults = function (ctrl) {

  if (ctrl['*'] === false) {
    return ctrl;
  }

  var defaults = ctrl['*'] || {};

  if (Object.keys(defaults).length > 0) {

    delete ctrl['*'];

    var methods = Object.keys(internals.defaultControllerOptions);

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = methods[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var method = _step2.value;

        if (method === 'associations' || ctrl[method] === false) {
          continue;
        }

        ctrl[method] = _hoek2['default'].applyToDefaults(defaults, ctrl[method] || {});
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var ascDefaults = ctrl.associations && ctrl.associations.hasOwnProperty('*') ? ctrl.associations['*'] : {};

    if (ascDefaults !== false) {
      ctrl.associations = ctrl.associations || {};

      ctrl.associations['*'] = _hoek2['default'].applyToDefaults(defaults, ascDefaults);
    }
  }

  return _hoek2['default'].applyToDefaults(internals.defaultControllerOptions, ctrl);
};
